import React, { Fragment } from 'react';
import { Row, Col, FormGroup, FormControl, FormLabel, FormCheck, Form } from 'react-bootstrap';
import { Typeahead } from 'react-bootstrap-typeahead';

const endCustomers = [
	'Edinbridge Skill Solutions Pvt Ltd',
	'Daily Thanthi',
	'Readylink',
	'Zero One Media',
	'Dinakaran',
	'Sans Pareil',
	'The Residency',
	'Kumudam',
	'Sushmaas Enterprises',
	'Cadgraf Digitals pvt ltd'
];
const distributers = endCustomers.concat();
const channelPartners = endCustomers.concat();

const ProductType = React.forwardRef((props, ref) => {
	const [ a, setAbc ] = React.useState('');
	console.log(props, '@@@@@@@@@');
	const [ customerTypeError, setTypeError ] = React.useState(null);
	const [ customerInputError, setCustomerInputError ] = React.useState(null);
	const [ channelInputError, setChannelInputError ] = React.useState(null);
	const [ DistributerInputError, setDistributerInputError ] = React.useState(null);

	const [customerCurrentError,setCustomerCurrentError]=React.useState(null)
	const [channelCurrentError,setChannelCurrentError]=React.useState(null)
	const [DistributerCurrentError,setDistributerCurrentError]=React.useState(null)

	const {
		customerType,
		onClickCustomerType,
		customerInput,
		onChangeInput,
		onChangeChannel,
		channelInput,
		distrubuterInput,
		onChangeDistributer,
		isChecked,
		setIsChecked
	} = props;
	console.log(customerType, distrubuterInput, customerInput);

	

	const isValidated = () => {
		customerType === ''
			? setTypeError(<small className="text-danger mt-2">* You have to select a customer type.</small>)
			: setTypeError(null);
		let typeError = customerType !== '';
		let customerError = true;
		if (customerType === 'Direct') {
			customerInput === ''
				? setCustomerInputError(
						<small className="text-danger text-center mb-3">* You have to select an end customer .</small>
					)
				: setCustomerInputError(null);

			if (customerInput === '') {
				customerError = false;
			}
		}
		if (customerType === 'Channel Partner') {
			customerInput === ''
				? setCustomerInputError(
						<small className="text-danger text-center ">* You have to select an end customer .</small>
					)
				: setCustomerInputError(null);
			channelInput === ''
				? setChannelInputError(
						<small className="text-danger text-right">* You have to select a Channel Partner.</small>
					)
				: setChannelInputError(null);

			if (customerInput === '' || channelInput === '') {
				customerError = false;
			}
		}
		if (customerType === 'Distributer') {
			customerInput === ''
				? setCustomerInputError(
						<small className="text-danger  text-center">* You have to select an end customer .</small>
					)
				: setCustomerInputError(null);
			channelInput === ''
				? setChannelInputError(
						<small className="text-danger text-right">* You have to select a Channel Partner.</small>
					)
				: setChannelInputError(null);
			distrubuterInput === ''
				? setDistributerInputError(
						<small className="text-danger text-right">* You have to select a Distributer.</small>
					)
				: setDistributerInputError(null);

			if (customerInput === '' || channelInput === '' || distrubuterInput === '') {
				customerError = false;
			}
		}
		console.log(customerError, typeError, customerType);
		let valid = typeError && customerError;
		return valid;
	};
	React.useImperativeHandle(ref, () => ({
		isValidated: () => {
			return isValidated();
		}
	}));
	
	const onKeyEnter=(value,type,currentEvent)=>{
		currentEvent(value)
		if(type==='Direct'){
			const newCustomerList=endCustomers.filter(each=>(each.includes(customerCurrentValue.toLowerCase())))
			if(newCustomerList.length===0){
				setCustomerInputError(<small className="text-danger text-right">* Please select from exixting customer list.</small>)
			}
			else setCustomerInputError(null)
		}
		if(type==='Channel Partner'){
			const newCustomerList=endCustomers.filter(each=>(each.includes(customerCurrentValue.toLowerCase())))
			const newChannelList=channelPartners.filter(each=>(each.includes(channelCurrentValue.toLowerCase())))
			newCustomerList.length===0 ? (setCustomerInputError(<small className="text-danger text-right">* Please select from exixting customer list.</small>)):
			setCustomerInputError(null)
			
			newChannelList.length===0 ? (setChannelInputError(<small className="text-danger text-right">* Please select from exixting Channel Partner list.</small>)):
			setChannelInputError(null)
			console.log(channelInputError,)
		}

		
	}

	const onCustomerKeyEnter=(value)=>{
		const newCustomerList=endCustomers.filter(each=>(each.toLowerCase().includes(value.toLowerCase())))
		if(value===''){
			setCustomerInputError(<small className="text-danger mt-2">* You have to select a Channel Partner </small>)
		}
		else setCustomerInputError(null)
		if(newCustomerList.length===0){
			setCustomerCurrentError(<small className="text-danger text-right">* Please select from exixting customer list.</small>)
		}
		else{
			setCustomerCurrentError(null)
		}
	}

	const onChannelKeyEnter = (value)=>{
		const newCustomerList=channelPartners.filter(each=>(each.toLowerCase().includes(value.toLowerCase())))
		if(value===''){
			setChannelInputError(<small className="text-danger mt-2">* You have to select a Channel Partner </small>)
		}
		else setChannelInputError(null)
		if(newCustomerList.length===0){
			setChannelCurrentError(<small className="text-danger text-right">* Please select from exixting Channel Partner list.</small>)
		}
		else{
			setChannelCurrentError(null)
		}
	}

	const onDistributerKeyEnter = (value)=>{
		const newCustomerList=distributers.filter(each=>(each.toLowerCase().includes(value.toLowerCase())))
		if(value===''){
			setDistributerInputError(<small className="text-danger mt-2">* You have to select a Channel Partner </small>)
		}
		else setDistributerInputError(null)
		if(newCustomerList.length===0){
			setDistributerCurrentError(<small className="text-danger text-right">* Please select from exixting ditributers list.</small>)
		}
		else{
			setDistributerCurrentError(null)
		}
	}
		
	const renderEndCustomerDetails = () => {
		return (
			<Form.Group as={Row} className="search-group mt-3" controlId="formPlaintextText">
				<Form.Label column sm="6">
					* End Customer:
				</Form.Label>
				<Col sm="12">
					<Typeahead
						id="basic-typeahead-single"
						labelKey="name"
						onChange={(event) => {
							console.log(event,'#$^&*')
							onChangeInput(event)
							
						}}
						onInputChange={(value)=>{	
							setCustomerInputError(null)						
							onCustomerKeyEnter(value)
						}}
						options={endCustomers}
						selected={customerInput}
					/>
				</Col>
			</Form.Group>		
			);
	}

	const renderChannelPartnerDetails = () => {
		return (
			<Form.Group as={Row} className="search-group mt-3" controlId="formPlaintextText">
				<Form.Label column sm="6">
					* Channel Partner:
				</Form.Label>
				<Col sm="12">
					<Typeahead
						id="basic-typeahead-single"
						labelKey="name"
						onChange={(event) => {
							console.log(event,'#$^&*')
							onChangeChannel(event)
						}}
						onInputChange={(value)=>{							
							onChannelKeyEnter(value)
						}}
						options={channelPartners}
						selected={channelInput}
					/>
				</Col>
			</Form.Group>		
			);
	}

	const renderDistributerDetails = () => {
		return (
			<Form.Group as={Row} className="search-group mt-3" controlId="formPlaintextText">
				<Form.Label column sm="6">
					* Distributer:
				</Form.Label>
				<Col sm="12">
					<Typeahead
						id="basic-typeahead-single"
						labelKey="name"
						onChange={(event) => {
							console.log(event,'#$^&*')
							onChangeDistributer(event)
						}}
						onInputChange={(value)=>{							
							onDistributerKeyEnter(value)
						}}
						options={distributers}
						selected={distrubuterInput}
					/>
				</Col>
			</Form.Group>		
			);
	}

	const selectCustomer = () => {
		switch (customerType) {
			case 'Direct':
				return (
					<Fragment>
						{renderEndCustomerDetails()}
						{customerCurrentError}
						{customerInputError}
						
					</Fragment>
				);

			case 'Channel Partner':
				return (
					<Fragment>
						{renderEndCustomerDetails()}
						{customerCurrentError}
						{customerInputError}
						{renderChannelPartnerDetails()}
						{channelCurrentError}
						{channelInputError}
					</Fragment>
				);
			case 'Distributer':
				return (
					<Fragment>
						{renderEndCustomerDetails()}
						{customerCurrentError}
						{customerInputError}
						{renderChannelPartnerDetails()}
						{channelCurrentError}
						{channelInputError}
						{renderDistributerDetails()}
						{DistributerCurrentError}
						{DistributerInputError}
					</Fragment>
				);
			default:
				return null;
		}
	};

	return (
		<div className="wizard-step d-flex flex-column align-items-center" ref={ref}>
			<p className="mb-5">Please select the type of customer.</p>
			<Row className="">
				<Col md="12">
					<FormGroup className="">
						<FormCheck
							type="radio"
							id="Direct"
							label="Direct"
							name="order"
							onClick={(event) => {
								onClickCustomerType(event.target.value)
								setTypeError(null)
								
							}}
							value="Direct"
						/>
					</FormGroup>
				</Col>
				<Col md="12">
					<FormGroup>
						<FormCheck
							type="radio"
							id="channelPartner"
							label="Channel Partner"
							name="order"
							onClick={(event) => {
								onClickCustomerType(event.target.value)
								setTypeError(null)
							}}
							value="Channel Partner"
						/>
					</FormGroup>
				</Col>
				<Col md="12">
					<FormGroup>
						<FormCheck
							type="radio"
							id="Distributer"
							label="Distributer"
							name="order"
							onClick={(event) => {
								onClickCustomerType(event.target.value)
								setTypeError(null)
							}}
							value="Distributer"
						/>
					</FormGroup>
				</Col>
				
			</Row>
			<Row>
				<Col md="12">{customerTypeError}</Col>
			</Row>
			<Row>
				<Col md={{ span: 10, offset: 1 }}>{selectCustomer()}</Col>
			</Row>
		</div>
	);
});

export default ProductType;
